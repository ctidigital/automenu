<?php
// $Id: automenu.module,v 1.1.2.1 2008/10/01 07:25:41 danielfs Exp $

/**
 * Implementation of hook_nodeapi().
 * Fill in menu section values if user left them empty AND there's a parent
 * menu item selected for this node type AND the node is published
 */
function automenu_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if($op == 'submit') _automenu_insert_node($node);
}

/**
 * Implementation of hook_form_alter().
 * Add the "Default Parent Menu" section to content type edit node.
 */
function automenu_form_alter($form_id, &$form) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    $form['workflow']['parentmenu'] = array(
      '#type' => 'select',
      '#title' => t('Default Parent Menu'),
      '#default_value' => variable_get('parentmenu_'. $form['#node_type']->type, 0),
      '#options' => _automenu_build_menu_opts()
    );
    $form['workflow']['menu_vocab'] = array(
      '#type' => 'select',
      '#title' => t('Vocabulary on which to base Submenu'),
      '#default_value' => variable_get("menu_vocab_{$form['#node_type']->type}", 0),
      '#options' => _automenu_vocab_opts($form['#node_type']),
    );
  }
}

/**
 */
function _automenu_insert_node(&$node) {
  $parent_menu = _automenu_parent_menu($node);
  echo "Node: {$node->title}\tParent: $parent_menu\n";
  if ($parent_menu) {
    if ((($node->menu['title'] == '') || ($node->menu['delete'])) && ($node->status == 1)) {
      $node->menu['title'] = $node->title;
      $node->menu['pid'] = $parent_menu;
      $node->menu['type'] = 118;
      unset($node->menu['delete']);
    }
  }
}
/**
 * Build the menu list to show in the content type edit form.
 */
function _automenu_build_menu_opts($pid=0, $indent='') {
  $t = menu_get_menu();
  $result = array($pid => $indent . $t['visible'][$pid]['title']);
  if (isset($t['visible'][$pid]['children'])) {
    foreach ($t['visible'][$pid]['children'] as $child) {
      $result += _automenu_build_menu_opts($child, '--'. $indent);
    }
  }
  return $result;
}

/**
 * Get a list of vocabularies we can base submenus off
 *
 * @param $type
 */
function _automenu_vocab_opts($type) {
  $sql = db_query("
    SELECT * FROM {vocabulary}
    INNER JOIN {vocabulary_node_types} ON vocabulary.vid = vocabulary_node_types.vid
    WHERE vocabulary_node_types.type = 'news'
  ");

  $opts = array(NULL => 'No Submenu');

  while($vocab = db_fetch_object($sql))
    $opts[$vocab->vid] = $vocab->name;

  return $opts;
}

/**
 * Get the parent menu for a node, based on its category
 *
 * If there isn't a menu item for the node's category, this function will create one and return its mid.
 * This means that when nodes are deleted, we'll be leaving parent entries without categories lying around,
 * so we'll need to deal with that somewhere else.
 *
 * @param $node The node we want to insert into the menu
 * @returns The mid of the parent item
 */
function _automenu_parent_menu($node) {
  // Get specified parent item, or die
  $parent_mid = variable_get("parentmenu_{$node->type}", NULL);
  if($parent_mid === NULL) return NULL;

  // Get the term name of our chosen vocabulary
  foreach($node->taxonomy as $term_id => $node_term) {
    /* For some reason we see 2 completely different versions of the taxonomy node property.
     * We need to handle both, hence this gash. */

    // Node being created
    if(is_array($node_term)) {
      if($term_id == variable_get("menu_vocab_{$node->type}", NULL))
        $submenu_term = taxonomy_get_term(array_pop($node_term))->name;
    }

    // Node being altered
    else if(is_object($node_term)) {
      if($node_term->vid == variable_get("menu_vocab_{$node->type}", NULL))
        $submenu_term = $node_term->name;
    }
  }

  // No submenu
  if(variable_get("menu_vocab_{$node->type}", NULL) == NULL || !$submenu_term) {
    return $parent_mid;
  }

  // Get currently defined submenus
  $submenus = array();
  $sql = db_query("SELECT * FROM {menu} WHERE pid = %d", $parent_mid);
  while($submenu = db_fetch_object($sql))
    $submenus[$submenu->mid] = $submenu;

  // Submenu already exists
  $pre_submenu = array_search($submenu_term, $submenus);
  if($pre_submenu !== FALSE)
    return $pre_submenu;

  // Create new submenu and return the mid
  db_query("INSERT INTO {menu}(pid, title, type) VALUES(%d, '%s', 118)", $parent_mid, $submenu_term);
  return db_fetch_object(db_query(
    "SELECT mid FROM {menu} WHERE pid = %d AND title = '%s' AND type = 118", $parent_mid, $submenu_term
  ))->mid;
}

/**
 * Drush callback for automenu-rebuild
 */
function automenu_rebuild($type, $limit = NULL) {
  // Find the nids of all nodes with the specified type.
  $nodes = db_query("SELECT nid FROM {node} WHERE status = 1 AND type = '%s'", $type);

  // Filter nodes down to only ones with no menu item
  while(($limit === NULL || $limit) && ($nid = db_fetch_object($nodes)->nid)) {
    if(!db_fetch_object(db_query("SELECT COUNT(*) AS n FROM menu WHERE path = '%s'", "node/{$nid}"))->n) {
      $node = node_load($nid);
      $limit--;

      _automenu_insert_node($node);
      node_save($node);
    }
  }
  return 0;
}
